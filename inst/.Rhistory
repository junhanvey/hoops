actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
record <- tmRec(tm) |>
tibble()
})
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
})
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tibble(tmRec(tm), selections = isolate(input$tm))
})
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
})
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
})
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
})
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
renderTable
?renderTable
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
})
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE), colnames = FALSE)
message
})
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
})
output$teamPlot <- renderPlot({
ptsHist(tm)
}, digits = 3)
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
}, digits = 3)
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
}, digits = 3)
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tmRec(tm)
}, digits = 3, colnames = FALSE, rownames = FALSE)
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- function(){
req(input$tm)
record <-  tm |>
tmRec() |>
knitr::kable("html")
}
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
tibble(tmRec(tm))
}, digits = 3, colnames = FALSE, rownames = FALSE)
knitr::kable(record)
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
titlePanel("College Basketball Data"),
sidebarLayout(
sidebarPanel(
textInput("team", "Select a Team!"),
actionButton("submit", "Go!")
),
mainPanel(
tableOutput("teamTab"),
plotOutput("teamPlot")
)
)
)
server <- function(input, output, session){
observeEvent(input$submit, {
req(input$team)
tm <- input$team
cbbga23 <- hoops::cbbga23
Teams <- hoops::Teams
if (tm %in% Teams$Team){
output$teamTab <- renderTable({
record <- tibble(tmRec(tm))
}, digits = 3, colnames = FALSE, rownames = FALSE)
knitr::kable(record)
output$teamPlot <- renderPlot({
ptsHist(tm)
})
} else {
output$teamTab <- renderTable({
availableTms <- sort(unique(c(cbbga23$Home, cbbga23$Away)))
message <- paste("We don't have data for that team! Try again with one of these?",
paste(availableTms, collapse = ",\n", recycle0 = TRUE))
message
}, colnames = FALSE)
output$team_plot <- NULL
}
})
}
shinyApp(ui = ui, server = server)
?kable
load("~/MATH3190/mypackage/inst/shiny/correlation_app/.RData")
View(tmTbl)
View(tmTbl)
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
setwd("C:/Users/Jun/Documents/MATH3190/hoops/inst")
shiny::runApp(appDir, display.mode = "normal")
runCor <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
devtools::document()
?runCbb
runCor <- function() {
appDir <- system.file("shiny", "correlation_app", package = "mypackage")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `mypackage`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
?runCor
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
shiny::runApp(appDir, display.mode = "normal")
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
source("~/MATH3190/hoops/R/runCbb.R", echo=TRUE)
runCbb <- function() {
appDir <- system.file("shiny", "cbbApp", package = "hoops")
if (appDir == "") {
stop("Could not find example directory. Try re-installing `hoops`.",
call. = FALSE)
}
shiny::runApp(appDir, display.mode = "normal")
}
